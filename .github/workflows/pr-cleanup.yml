name: PR Preview Cleanup

on:
  pull_request_target:
    types: [closed]

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  cleanup:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove preview directory
        run: |
          PREVIEW_PATH="pr-${{ github.event.pull_request.number }}"

          # Check whether gh-pages exists on the remote; if not, nothing to do
          if ! git ls-remote --exit-code --heads origin gh-pages >/dev/null 2>&1; then
            echo "No gh-pages branch found on remote; skipping cleanup"
            exit 0
          fi

          # Ensure we have latest gh-pages to avoid push conflicts
          git fetch origin gh-pages
          # Create or reset a local gh-pages branch to match remote
          git checkout -B gh-pages origin/gh-pages
          git pull --rebase origin gh-pages || true

          if [ -d "$PREVIEW_PATH" ]; then
            echo "Removing preview directory: $PREVIEW_PATH"
            git rm -rf "$PREVIEW_PATH" || true
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            if git diff --staged --quiet; then
              echo "Nothing to commit after removal (nothing staged)"
            else
              git commit -m "cleanup: remove preview for PR #${{ github.event.pull_request.number }}" || true
              git push origin gh-pages || true
              echo "Preview cleaned up successfully"
            fi
          else
            echo "Preview directory not found, may have been already cleaned up"
          fi

      - name: Trigger Pages deploy to drop preview from live site
        if: ${{ github.event.pull_request.merged != true }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.request('POST /repos/{owner}/{repo}/dispatches', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'pr-preview-removed',
              client_payload: { pr: context.payload.pull_request.number }
            });
            core.info('Triggered repository_dispatch: pr-preview-removed')

      - name: Comment cleanup
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const prNumber = context.payload.pull_request?.number || context.issue.number;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'Preview cleaned up after PR closure.'
              });
              core.info(`Commented on PR #${prNumber}: cleanup notice posted`);
            } catch (error) {
              core.info(`Skipping cleanup comment (likely permissions on forked PRs): ${error.message}`);
            }

      - name: Delete preview artifacts
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const artifactName = `pr-preview-${prNumber}`;
            
            console.log(`Searching for artifacts named: ${artifactName}`);
            
            // List all artifacts for the repo (paginate if needed)
            let page = 1;
            let deletedCount = 0;
            
            while (page <= 5) {  // Safety limit: check first 5 pages (500 artifacts max)
              const { data } = await github.rest.actions.listArtifactsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                page: page
              });
              
              if (!data.artifacts || data.artifacts.length === 0) {
                break;
              }
              
              for (const artifact of data.artifacts) {
                if (artifact.name === artifactName) {
                  try {
                    await github.rest.actions.deleteArtifact({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      artifact_id: artifact.id
                    });
                    console.log(`✓ Deleted artifact: ${artifact.name} (ID: ${artifact.id})`);
                    deletedCount++;
                  } catch (error) {
                    console.log(`✗ Failed to delete artifact ${artifact.id}: ${error.message}`);
                  }
                }
              }
              
              page++;
            }
            
            console.log(`Cleanup complete. Deleted ${deletedCount} artifact(s).`);
