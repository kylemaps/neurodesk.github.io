name: PR Preview Deploy

on:
  workflow_run:
    workflows: ["PR Preview Build"]
    types:
      - completed

permissions:
  contents: write
  issues: write
  pull-requests: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  deploy:
    # Only deploy if the build succeeded and came from a pull_request event
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    runs-on: ubuntu-22.04
    steps:
      - name: Find PR number from artifacts
        id: find-pr
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            
            const prArtifact = artifacts.data.artifacts.find(artifact => 
              artifact.name.startsWith('pr-preview-')
            );
            
            if (!prArtifact) {
              throw new Error('No PR preview artifact found');
            }
            
            const prNumber = prArtifact.name.replace('pr-preview-', '');
            console.log(`Found PR number: ${prNumber}`);
            return prNumber;
          result-encoding: string

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: pr-preview-${{ steps.find-pr.outputs.result }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: false

      - name: Read PR metadata
        id: pr-meta
        run: |
          PR_NUMBER=$(cat pr-metadata/pr-number.txt)
          BASE_REPO=$(cat pr-metadata/base-repo.txt)
          BASE_OWNER=$(cat pr-metadata/base-owner.txt)
          BASE_NAME=$(cat pr-metadata/base-name.txt)
          HEAD_SHA=$(cat pr-metadata/head-sha.txt)
          HEAD_REF=$(cat pr-metadata/head-ref.txt)
          
          echo "pr-number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "base-repo=${BASE_REPO}" >> $GITHUB_OUTPUT
          echo "base-owner=${BASE_OWNER}" >> $GITHUB_OUTPUT
          echo "base-name=${BASE_NAME}" >> $GITHUB_OUTPUT
          echo "head-sha=${HEAD_SHA}" >> $GITHUB_OUTPUT
          echo "head-ref=${HEAD_REF}" >> $GITHUB_OUTPUT

      - name: Remove legacy CNAME on gh-pages (target branch)
        if: ${{ steps.pr-meta.outputs.base-repo == 'neurodesk/neurodesk.github.io' }}
        env:
          PR_NUMBER: ${{ steps.pr-meta.outputs.pr-number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Cleaning legacy CNAME from gh-pages for pr-${PR_NUMBER}"
          # Clone gh-pages with token auth
          git clone --depth=1 --single-branch --branch gh-pages "https://x-access-token:${GH_TOKEN}@github.com/neurodesk/neurodesk.github.io.git" gh-pages-work
          cd gh-pages-work
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Remove any CNAME files under the PR preview path (root and static), if present
          TARGET_DIR="pr-${PR_NUMBER}"
          rm -f "${TARGET_DIR}/CNAME" || true
          rm -f "${TARGET_DIR}/static/CNAME" || true

          # Only commit if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "chore(preview): remove legacy CNAME for ${TARGET_DIR}"
            git push origin gh-pages
            echo "Pushed cleanup commit for ${TARGET_DIR}"
          else
            echo "No legacy CNAME found for ${TARGET_DIR}; nothing to clean"
          fi

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview-deploy
          destination_dir: .
          keep_files: true

      - name: Comment preview URL
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.pr-meta.outputs.pr-number }}
          BASE_REPO: ${{ steps.pr-meta.outputs.base-repo }}
          BASE_OWNER: ${{ steps.pr-meta.outputs.base-owner }}
          BASE_NAME: ${{ steps.pr-meta.outputs.base-name }}
          HEAD_SHA: ${{ steps.pr-meta.outputs.head-sha }}
          HEAD_REF: ${{ steps.pr-meta.outputs.head-ref }}
          HUGO_VERSION: "0.146.0"
        with:
          script: |
            const prNumber = Number(process.env.PR_NUMBER);
            const baseRepo = process.env.BASE_REPO;
            const baseOwner = process.env.BASE_OWNER;
            const baseName = process.env.BASE_NAME;
            const headSha = process.env.HEAD_SHA;
            const headRef = process.env.HEAD_REF;
            
            let previewUrl;
            if (baseRepo === 'neurodesk/neurodesk.github.io') {
              previewUrl = `https://neurodesk.org/pr-${prNumber}/`;
            } else {
              previewUrl = `https://${baseOwner}.github.io/${baseName}/pr-${prNumber}/`;
            }

            const marker = '<!-- pr-preview:neurodesk -->';
            const commentBody = `${marker}\n## Preview Deployed\n\n**Preview URL:** ${previewUrl}\n\nThis preview updates automatically when you push new commits to this PR.\nIt will be cleaned up when the PR is closed or merged.\n\n<details>\n<summary>Build Details</summary>\n\n- Commit: ${headSha.substring(0, 7)}\n- Branch: \`${headRef}\`\n- Hugo Version: ${process.env.HUGO_VERSION}\n\n</details>`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100
            });

            const botComment = comments.find(comment => comment.body && comment.body.includes(marker));

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log('Updated existing preview comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('Created new preview comment');
            }
